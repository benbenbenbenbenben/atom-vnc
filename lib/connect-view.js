// Generated by CoffeeScript 1.12.4
(function() {
  var CompositeDisposable, TextEditorView, View, VncConnectView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CompositeDisposable = require('atom').CompositeDisposable;

  TextEditorView = require('atom-space-pen-views').TextEditorView;

  View = require('space-pen').View;

  module.exports = VncConnectView = (function(superClass) {
    extend(VncConnectView, superClass);

    function VncConnectView() {
      return VncConnectView.__super__.constructor.apply(this, arguments);
    }

    VncConnectView.content = function() {
      return this.div({
        "class": 'vnc overlay from-top panel bordered'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": "panel-heading"
          }, function() {
            return _this.div({
              "class": 'icon icon-telescope text-info'
            }, 'Connect to VNC server');
          });
          return _this.div({
            "class": "panel-body padded"
          }, function() {
            _this.label('Host:');
            _this.subview('host', new TextEditorView({
              mini: true
            }));
            _this.label('Port:');
            _this.subview('port', new TextEditorView({
              mini: true
            }));
            return _this.div({
              "class": 'block',
              outlet: 'buttonBlock'
            }, function() {
              _this.button({
                "class": 'inline-block btn',
                outlet: 'cancelButton'
              }, 'Cancel');
              return _this.button({
                "class": 'inline-block btn',
                outlet: 'okButton'
              }, 'OK');
            });
          });
        };
      })(this));
    };

    VncConnectView.prototype.initialize = function() {
      this.subscriptions = new CompositeDisposable();
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'core:confirm': (function(_this) {
          return function() {
            return _this.confirm();
          };
        })(this)
      }));
      this.okButton.on('click', (function(_this) {
        return function() {
          return _this.confirm();
        };
      })(this));
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'core:cancel': (function(_this) {
          return function() {
            return _this.detach();
          };
        })(this)
      }));
      this.cancelButton.on('click', (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
      this.host.setText('localhost');
      this.port.setText('5900');
      this.host.getModel().setPlaceholderText('vnc server host or ip (default localhost)');
      this.port.getModel().setPlaceholderText('vnc server port       (default 5900)');
      return atom.views.getView(atom.workspace).appendChild(this.element);
    };

    VncConnectView.prototype.confirm = function() {
      var host, port;
      port = this.port.getText();
      host = this.host.getText();
      atom.workspace.open("vnc://" + host + ":" + port);
      return this.detach();
    };

    VncConnectView.prototype.destroy = function() {
      this.subscriptions.dispose();
      return this.detach();
    };

    return VncConnectView;

  })(View);

}).call(this);
