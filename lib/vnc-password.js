// Generated by CoffeeScript 1.12.4
(function() {
  var CompositeDisposable, TextEditorView, View, VncPassword,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CompositeDisposable = require('atom').CompositeDisposable;

  TextEditorView = require('atom-space-pen-views').TextEditorView;

  View = require('space-pen').View;

  module.exports = VncPassword = (function(superClass) {
    extend(VncPassword, superClass);

    function VncPassword() {
      return VncPassword.__super__.constructor.apply(this, arguments);
    }

    VncPassword.content = function(params) {
      return this.div({
        "class": 'vnc password overlay from-top panel bordered'
      }, (function(_this) {
        return function() {
          _this.div({
            "class": "panel-heading"
          }, function() {
            return _this.div({
              "class": 'icon icon-person text-info',
              outlet: 'info'
            }, "Connecting to " + params.host + ":" + params.port + " using VNC security type");
          });
          return _this.div({
            "class": "panel-body padded"
          }, function() {
            _this.label('Password:');
            _this.subview('password', new TextEditorView({
              mini: true,
              password: true
            }));
            return _this.div({
              "class": 'block',
              outlet: 'buttonBlock'
            }, function() {
              _this.button({
                "class": 'inline-block btn',
                outlet: 'cancelButton'
              }, 'Cancel');
              return _this.button({
                "class": 'inline-block btn',
                outlet: 'okButton'
              }, 'OK');
            });
          });
        };
      })(this));
    };

    VncPassword.prototype.initialize = function(params) {
      this.subscriptions = new CompositeDisposable;
      this.callback = params.callback;
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'core:confirm': (function(_this) {
          return function() {
            return _this.confirm();
          };
        })(this)
      }));
      this.okButton.on('click', (function(_this) {
        return function() {
          return _this.confirm();
        };
      })(this));
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'core:cancel': (function(_this) {
          return function() {
            return _this.detach();
          };
        })(this)
      }));
      this.cancelButton.on('click', (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
      atom.views.getView(atom.workspace).appendChild(this.element);
      return this.subscriptions.add(this.password.getModel().getBuffer().onDidChange((function(_this) {
        return function() {
          if (_this.password.getText() === '') {
            return _this.password.css({
              '-webkit-text-security': 'none'
            });
          } else {
            return _this.password.css({
              '-webkit-text-security': 'disc'
            });
          }
        };
      })(this)));
    };

    VncPassword.prototype.confirm = function() {
      this.callback(null, this.password.getText());
      return this.detach();
    };

    VncPassword.prototype.destroy = function() {
      this.subscriptions.dispose();
      this.callback('cancel');
      return this.detach();
    };

    return VncPassword;

  })(View);

}).call(this);
